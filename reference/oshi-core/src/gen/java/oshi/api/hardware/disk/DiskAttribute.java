/**
 * OSHI (https://github.com/oshi/oshi)
 *
 * Copyright (c) 2010 - 2019 The OSHI Project Team:
 * https://github.com/oshi/oshi/graphs/contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// This file was automatically generated by the OSHI API generator; do not edit!
package oshi.api.hardware.disk;

import javax.annotation.processing.Generated;
import oshi.api.AttributeKey;
import oshi.api.hardware.disk.internal.DiskAttributeEnum;

@Generated("oshi.ApiGenerator")
public class DiskAttribute {
    public static final AttributeKey<String> NAME = new AttributeKey<>(DiskAttributeEnum.NAME);

    public static final AttributeKey<String> PATH = new AttributeKey<>(DiskAttributeEnum.PATH);

    public static final AttributeKey<String> MODEL = new AttributeKey<>(DiskAttributeEnum.MODEL);

    public static final AttributeKey<String> SERIAL = new AttributeKey<>(DiskAttributeEnum.SERIAL);

    /**
     * The disk's total size in bytes
     */
    public static final AttributeKey<Long> SIZE = new AttributeKey<>(DiskAttributeEnum.SIZE);

    public static final AttributeKey<Long> READS = new AttributeKey<>(DiskAttributeEnum.READS);

    public static final AttributeKey<Long> READ_BYTES = new AttributeKey<>(DiskAttributeEnum.READ_BYTES);

    public static final AttributeKey<Long> WRITES = new AttributeKey<>(DiskAttributeEnum.WRITES);

    public static final AttributeKey<Long> WRITE_BYTES = new AttributeKey<>(DiskAttributeEnum.WRITE_BYTES);

    public static final AttributeKey<Long> QUEUE_LENGTH = new AttributeKey<>(DiskAttributeEnum.QUEUE_LENGTH);

    public static final AttributeKey<Long> TRANSFER_TIME = new AttributeKey<>(DiskAttributeEnum.TRANSFER_TIME);

    public static final AttributeKey<String> MODEL_FAMILY = new AttributeKey<>(DiskAttributeEnum.MODEL_FAMILY);

    public static final AttributeKey<String> FIRMWARE_VERSION = new AttributeKey<>(DiskAttributeEnum.FIRMWARE_VERSION);

    public static final AttributeKey<Long> ROTATION_RATE = new AttributeKey<>(DiskAttributeEnum.ROTATION_RATE);

    public static final AttributeKey<Long> READ_ERROR_RATE = new AttributeKey<>(DiskAttributeEnum.READ_ERROR_RATE);

    public static final AttributeKey<Long> SPIN_UP_TIME = new AttributeKey<>(DiskAttributeEnum.SPIN_UP_TIME);

    public static final AttributeKey<Long> START_STOP_CYCLES = new AttributeKey<>(DiskAttributeEnum.START_STOP_CYCLES);

    public static final AttributeKey<Long> REALLOCATED_SECTORS = new AttributeKey<>(
            DiskAttributeEnum.REALLOCATED_SECTORS);

    public static final AttributeKey<Long> SEEK_ERROR_RATE = new AttributeKey<>(DiskAttributeEnum.SEEK_ERROR_RATE);

    public static final AttributeKey<Long> POWER_ON_TIME = new AttributeKey<>(DiskAttributeEnum.POWER_ON_TIME);

    public static final AttributeKey<Long> SPIN_RETRIES = new AttributeKey<>(DiskAttributeEnum.SPIN_RETRIES);

    public static final AttributeKey<Long> CALIBRATION_RETRIES = new AttributeKey<>(
            DiskAttributeEnum.CALIBRATION_RETRIES);

    public static final AttributeKey<Long> POWER_CYCLES = new AttributeKey<>(DiskAttributeEnum.POWER_CYCLES);

    public static final AttributeKey<Long> POWEROFF_RETRACTS = new AttributeKey<>(DiskAttributeEnum.POWEROFF_RETRACTS);

    public static final AttributeKey<Long> LOAD_CYCLES = new AttributeKey<>(DiskAttributeEnum.LOAD_CYCLES);

    public static final AttributeKey<Long> TEMPERATURE = new AttributeKey<>(DiskAttributeEnum.TEMPERATURE);

    public static final AttributeKey<Long> REALLOCATED_EVENTS = new AttributeKey<>(
            DiskAttributeEnum.REALLOCATED_EVENTS);

    public static final AttributeKey<Long> CURRENT_PENDING_SECTOR = new AttributeKey<>(
            DiskAttributeEnum.CURRENT_PENDING_SECTOR);

    public static final AttributeKey<Long> OFFLINE_UNCORRECTABLE = new AttributeKey<>(
            DiskAttributeEnum.OFFLINE_UNCORRECTABLE);

    public static final AttributeKey<Long> CRC_ERRORS = new AttributeKey<>(DiskAttributeEnum.CRC_ERRORS);

    public static final AttributeKey<Long> MULTIZONE_ERROR_RATE = new AttributeKey<>(
            DiskAttributeEnum.MULTIZONE_ERROR_RATE);
}
