/**
 * OSHI (https://github.com/oshi/oshi)
 *
 * Copyright (c) 2010 - 2019 The OSHI Project Team:
 * https://github.com/oshi/oshi/graphs/contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// This file was automatically generated by the OSHI API generator; do not edit!
package oshi.api.hardware.nic.internal;

import java.lang.Override;
import javax.annotation.processing.Generated;
import oshi.api.AttributeKey;
import oshi.api.DetachedContainerException;
import oshi.api.hardware.nic.NicWindows;
import oshi.driver.ComponentDriver;

/**
 * A network interface
 */
@Generated("oshi.ApiGenerator")
public class NicContainerWindows extends NicContainer implements NicWindows {
    /**
     * The interface's locally unique identifier
     */
    public Long luid;

    /**
     * The interface's globally unique identifier
     */
    public String guid;

    /**
     * Whether the interface is in a paused state
     */
    public Boolean paused;

    /**
     * Whether the interface is in a low-power state
     */
    public Boolean lowpower;

    @Override
    public Long getLuid() {
        return luid;
    }

    @Override
    public Long queryLuid() {
        if (driver == null) {
            throw new DetachedContainerException();
        }
        driver.query(NicAttributeEnum.LUID);
        return luid;
    }

    @Override
    public String getGuid() {
        return guid;
    }

    @Override
    public String queryGuid() {
        if (driver == null) {
            throw new DetachedContainerException();
        }
        driver.query(NicAttributeEnum.GUID);
        return guid;
    }

    @Override
    public Boolean getPaused() {
        return paused;
    }

    @Override
    public Boolean queryPaused() {
        if (driver == null) {
            throw new DetachedContainerException();
        }
        driver.query(NicAttributeEnum.PAUSED);
        return paused;
    }

    @Override
    public Boolean getLowpower() {
        return lowpower;
    }

    @Override
    public Boolean queryLowpower() {
        if (driver == null) {
            throw new DetachedContainerException();
        }
        driver.query(NicAttributeEnum.LOWPOWER);
        return lowpower;
    }

    public void attach(ComponentDriver driver) {
        this.driver = driver;
        super.attach(driver);
        // Query all constant attributes:
    }

    @Override
    public <T> T get(AttributeKey<T> key) {
        switch ((NicAttributeEnum) key.getAttributeEnum()) {
        default:
            return super.get(key);
        case LUID:
            return (T) luid;
        case GUID:
            return (T) guid;
        case PAUSED:
            return (T) paused;
        case LOWPOWER:
            return (T) lowpower;
        }
    }
}
